# blend.gbuffers_textured=ONE ZERO ZERO ONE
# blend.gbuffers_terrain=off
# blend.gbuffers_textured.colortex1=off
# blend.gbuffers_textured.colortex2=off
# blend.gbuffers_textured.colortex4=off
# blend.gbuffers_entities.colortex1=off
# blend.gbuffers_entities.colortex2=off

# Should be enabled
blend.gbuffers_entities.colortex2=off
blend.gbuffers_hand=off
blend.gbuffers_basic=off
blend.gbuffers_terrain.colortex1=off
blend.gbuffers_terrain.colortex2=off
blend.gbuffers_terrain.colortex4=off
blend.gbuffers_water.colortex1=off
blend.gbuffers_water.colortex2=off
blend.gbuffers_water.colortex4=off
blend.gbuffers_hand_water.colortex1=off
blend.gbuffers_hand_water.colortex2=off
blend.gbuffers_hand_water.colortex4=off
# blend.gbuffers_skytextured=off
# blend.gbuffers_skybasic=off

# blend.gbuffers_basic.colortex1=off
# blend.gbuffers_block.colortex1=off
# blend.gbuffers_entities.colortex1=off
# blend.gbuffers_hand_water.colortex1=off
# blend.gbuffers_hand.colortex1=off
# blend.gbuffers_textured.colortex1=off


# blend.gbuffers_textured.colortex1=off
# blend.gbuffers_textured.colortex3=off
# blend.gbuffers_textured.colortex3=off
# blend.gbuffers_textured.colortex5=off
# blend.gbuffers_textured.colortex6=off
# blend.gbuffers_textured.colortex0=SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE_MINUS_SRC_ALPHA SRC_ALPHA
# blend.composite3.colortex13=off


blend.gbuffers_basic.colortex1=off
blend.gbuffers_beaconbeam.colortex1=off
blend.gbuffers_block_translucent.colortex1=off
blend.gbuffers_block.colortex1=off
blend.gbuffers_damageblock.colortex1=off
blend.gbuffers_entities_translucent.colortex1=off
blend.gbuffers_entities.colortex1=off
blend.gbuffers_hand_water.colortex1=off
blend.gbuffers_hand.colortex1=off
blend.gbuffers_spidereyes.colortex1=off
blend.gbuffers_terrain.colortex1=off
blend.gbuffers_textured.colortex1=off
blend.gbuffers_water.colortex1=off
blend.gbuffers_weather.colortex1=off

clouds=off
sun=false
underwaterOverlay=false
vignette=false
# separateAo=true

rain.depth=true
oldHandLight=false

separateEntityDraws=true

# texture.noise=textures/noise.png
# texture.gbuffers.colortex9=textures/caustics.png
texture.composite.colortex13=textures/lensflare.png

scale.deferred=0.65

# size.buffer.colortex12 = 0.01 0.01

program.world0/composite5.enabled = Bloom
program.world0/composite6.enabled = Bloom
program.world0/composite7.enabled = Bloom

program.world0/shadow.enabled = Use_ShadowMap

#ifdef HandLight
    dynamicHandLight=false
#else
    dynamicHandLight=true
#endif

iris.features.required = SSBO


uniform.float.fogDensityMult = smooth(rainStrength, 50.0, 40.0)
# uniform.bool.isRiding = is_riding

# uniform.bool.inEnd = in(biome_category, CAT_THE_END)
# uniform.bool.inNether = in(biome_category, CAT_NETHER)

variable.float.waterColorR = if(in(biome, BIOME_SWAMP), 0.38,  in(biome, BIOME_LUKEWARM_OCEAN, BIOME_DEEP_LUKEWARM_OCEAN), 0.271, in(biome, BIOME_WARM_OCEAN), 0.263, in(biome, BIOME_COLD_OCEAN, BIOME_DEEP_COLD_OCEAN, BIOME_SNOWY_TAIGA, BIOME_SNOWY_BEACH), 0.239, in(biome, BIOME_FROZEN_RIVER, BIOME_FROZEN_OCEAN, BIOME_DEEP_FROZEN_OCEAN), 0.224, in(biome, BIOME_MEADOW), 0.055, in(biome, BIOME_MANGROVE_SWAMP), 0.227, 0.247)
variable.float.waterColorG = if(in(biome, BIOME_SWAMP), 0.482, in(biome, BIOME_LUKEWARM_OCEAN, BIOME_DEEP_LUKEWARM_OCEAN), 0.678, in(biome, BIOME_WARM_OCEAN), 0.835, in(biome, BIOME_COLD_OCEAN, BIOME_DEEP_COLD_OCEAN, BIOME_SNOWY_TAIGA, BIOME_SNOWY_BEACH), 0.341, in(biome, BIOME_FROZEN_RIVER, BIOME_FROZEN_OCEAN, BIOME_DEEP_FROZEN_OCEAN), 0.22,  in(biome, BIOME_MEADOW), 0.306, in(biome, BIOME_MANGROVE_SWAMP), 0.478, 0.463)
variable.float.waterColorB = if(in(biome, BIOME_SWAMP), 0.392, in(biome, BIOME_LUKEWARM_OCEAN, BIOME_DEEP_LUKEWARM_OCEAN), 0.949, in(biome, BIOME_WARM_OCEAN), 0.933, in(biome, BIOME_COLD_OCEAN, BIOME_DEEP_COLD_OCEAN, BIOME_SNOWY_TAIGA, BIOME_SNOWY_BEACH), 0.839, in(biome, BIOME_FROZEN_RIVER, BIOME_FROZEN_OCEAN, BIOME_DEEP_FROZEN_OCEAN), 0.788, in(biome, BIOME_MEADOW), 0.812, in(biome, BIOME_MANGROVE_SWAMP), 0.416, 0.894)
uniform.vec3.waterColor    = vec3(waterColorR, waterColorG, waterColorB)

variable.float.waterColorSmoothR = smooth(waterColorR, 10.0, 10.0)
variable.float.waterColorSmoothG = smooth(waterColorG, 10.0, 10.0)
variable.float.waterColorSmoothB = smooth(waterColorB, 10.0, 10.0)
uniform.vec3.waterColorSmooth    = vec3(waterColorSmoothR, waterColorSmoothG, waterColorSmoothB)


uniform.float.sunHeight = max(4.0*sunAngle - if(sunAngle < 0.25, 0.0, 8.0 * (sunAngle-0.25)), 0.0)
variable.float.moonAngle = sunAngle-0.5
uniform.float.moonHeight = max(4.0*moonAngle - if(moonAngle < 0.25, 0.0, 8.0 * (moonAngle-0.25)), 0.0)
uniform.float.shadowHeight = max(4.0*shadowAngle - if(shadowAngle < 0.25, 0.0, 8.0 * (shadowAngle-0.25)), 0.0)

# Taken from Kappa 4.0, also seen in many other shaders
variable.float.sunDirNorm   = 1.0 / sqrt((sunPosition.x * sunPosition.x) + (sunPosition.y * sunPosition.y) + (sunPosition.z * sunPosition.z))
variable.float.svecX        = sunPosition.x * sunDirNorm
variable.float.svecY        = sunPosition.y * sunDirNorm
variable.float.svecZ        = sunPosition.z * sunDirNorm
uniform.vec3.sunDirView     = vec3(svecX, svecY, svecZ)
variable.float.sunDirX      = gbufferModelViewInverse.0.0 * sunPosition.x + gbufferModelViewInverse.1.0 * sunPosition.y + gbufferModelViewInverse.2.0 * sunPosition.z
variable.float.sunDirY      = gbufferModelViewInverse.0.1 * sunPosition.x + gbufferModelViewInverse.1.1 * sunPosition.y + gbufferModelViewInverse.2.1 * sunPosition.z
variable.float.sunDirZ      = gbufferModelViewInverse.0.2 * sunPosition.x + gbufferModelViewInverse.1.2 * sunPosition.y + gbufferModelViewInverse.2.2 * sunPosition.z
uniform.vec3.sunDir         = vec3(sunDirX * sunDirNorm, sunDirY * sunDirNorm, sunDirZ * sunDirNorm)

variable.float.moonDirNorm  = 1.0 / sqrt((moonPosition.x * moonPosition.x) + (moonPosition.y * moonPosition.y) + (moonPosition.z * moonPosition.z))
variable.float.mvecX        = moonPosition.x * moonDirNorm
variable.float.mvecY        = moonPosition.y * moonDirNorm
variable.float.mvecZ        = moonPosition.z * moonDirNorm
uniform.vec3.moonDirView    = vec3(mvecX, mvecY, mvecZ)
variable.float.moonDirX     = gbufferModelViewInverse.0.0 * moonPosition.x + gbufferModelViewInverse.1.0 * moonPosition.y + gbufferModelViewInverse.2.0 * moonPosition.z
variable.float.moonDirY     = gbufferModelViewInverse.0.1 * moonPosition.x + gbufferModelViewInverse.1.1 * moonPosition.y + gbufferModelViewInverse.2.1 * moonPosition.z
variable.float.moonDirZ     = gbufferModelViewInverse.0.2 * moonPosition.x + gbufferModelViewInverse.1.2 * moonPosition.y + gbufferModelViewInverse.2.2 * moonPosition.z
uniform.vec3.moonDir        = vec3(moonDirX * moonDirNorm, moonDirY * moonDirNorm, moonDirZ * moonDirNorm)

variable.float.shadowmapLightDirX = shadowModelViewInverse.2.0 * 1.0
variable.float.shadowmapLightDirY = shadowModelViewInverse.2.1 * 1.0
variable.float.shadowmapLightDirZ = shadowModelViewInverse.2.2 * 1.0
uniform.vec3.lightDir = vec3(shadowmapLightDirX, shadowmapLightDirY, shadowmapLightDirZ)
variable.float.shadowmapLightDirViewX = gbufferModelView.0.0 * shadowmapLightDirX + gbufferModelView.1.0 * shadowmapLightDirY + gbufferModelView.2.0 * shadowmapLightDirZ
variable.float.shadowmapLightDirViewY = gbufferModelView.0.1 * shadowmapLightDirX + gbufferModelView.1.1 * shadowmapLightDirY + gbufferModelView.2.1 * shadowmapLightDirZ
variable.float.shadowmapLightDirViewZ = gbufferModelView.0.2 * shadowmapLightDirX + gbufferModelView.1.2 * shadowmapLightDirY + gbufferModelView.2.2 * shadowmapLightDirZ
uniform.vec3.lightDirView = vec3(shadowmapLightDirViewX, shadowmapLightDirViewY, shadowmapLightDirViewZ)

variable.bool.positionEqual = equals(cameraPosition.x, previousCameraPosition.x, 0.000001) && equals(cameraPosition.y, previousCameraPosition.y, 0.000001) && equals(cameraPosition.z, previousCameraPosition.z, 0.000001)
variable.bool.cameraTurned = equals(gbufferModelView.0.0, gbufferPreviousModelView.0.0, 0.000001)
uniform.bool.cameraMoved = !(positionEqual && cameraTurned)

bufferObject.0 = 64

screen = [DEBUG] [LIGHTING] [GEOMETRY] [POST_EFFECTS] SSR TAA MotionBlur SSS DOF POM
screen.DEBUG = viewBuffer worldColorMode viewBufferSweep Water_Flat
screen.LIGHTING = [SHADOWS] [FOG] [BLOCK_LIGHTING] [Reflections] SSS AmbientMetalHardcodeAlbedo EmissiveStrength AmbientMetalAlbedoMult
screen.GEOMETRY = [Parallax] [Water] cloudsEnable wavingPlants Water_Refraction Water_Flat
screen.POST_EFFECTS =[BLOOM] [DOF] MotionBlur LensFlare MotionBlur_Strength TAA
screen.BLOCK_LIGHTING = DirectionalLightmap DirectionalLightmap_Strength HandLight HandLight_Colors HandLight_Shadows LightningLight LightningLight_Shadows
screen.Reflections = SSR SSR_RoughReflections SSR_Steps SSR_BinarySteps SSR_LowThreshold SSR_LowRoughThreshold SSR_HighThreshold SSR_HighRoughThreshold
screen.SHADOWS = Use_ShadowMap ShadowSamples ShadowBlockSamples ShadowBlurScale ShadowMinBlur ShadowMaxBlur ShadowNoiseAnimated SSAO SSAO_Radius SSAO_Strength shadowMapResolution shadowDistance Shadow_LeakFix
screen.Parallax = POM POM_TexSizeFix POM_Depth POM_Layers POM_Shadow POM_Shadow_Layers POM_PDO POM_Filter POM_Variable_Layer POM_SlopeNormals Water_POM
screen.Water = Water_Depth Water_Refraction Water_TotalInternalReflection
screen.FOG = [VolumetricFog] [VolumetricWater] [VolumetricNether]
screen.VolumetricFog = VolFog VolFog_Steps VolFog_SmoothShadows VolFog_SmoothShadowSamples VolFog_SmoothShadowBlur
screen.VolumetricWater = VolWater VolWater_Steps VolWater_LightSteps VolWater_SmoothShadowSamples VolWater_SmoothShadowBlur
screen.VolumetricNether = VolFog_Nether VolFog_Nether_Steps VolFog_Nether_MaxDistance
screen.BLOOM = Bloom Bloom_Bicubic Bloom_Strength
screen.DOF = DOF DOF_BlurAmount DOF_FocusSpeed DOF_NearBlur DOF_HandBlur DOF_ConstSamples DOF_VariableSampleCount DOF_SampleDensity DOF_MaxSamples DOF_MinSamples DOF_NearTransitionBlur

sliders = ShadowSamples ShadowBlockSamples ShadowBlurScale ShadowMinBlur ShadowMaxBlur SSAO_Radius SSAO_Strength POM_Depth POM_Layers viewBufferSweep viewBuffer EmissiveStrength DOF_BlurAmount DOF_ConstSamples DOF_SampleDensity DOF_MaxSamples DOF_MinSamples DOF_FocusSpeed MotionBlur_Strength DirectionalLightmap_Strength AmbientMetalAlbedoMult VolFog_Nether_Steps VolFog_Nether_MaxDistance SSR_Steps SSR_BinarySteps SSR_LowThreshold SSR_LowRoughThreshold SSR_HighThreshold SSR_HighRoughThreshold Water_Depth