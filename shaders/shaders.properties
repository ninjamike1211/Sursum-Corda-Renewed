
blend.gbuffers_water.colortex3 = off
blend.gbuffers_water.colortex4 = off
blend.gbuffers_water.colortex5 = off
blend.gbuffers_water.colortex6 = off
blend.gbuffers_water.colortex7 = off

blend.gbuffers_hand_water.colortex3 = off
blend.gbuffers_hand_water.colortex4 = off
blend.gbuffers_hand_water.colortex5 = off
blend.gbuffers_hand_water.colortex6 = off
blend.gbuffers_hand_water.colortex7 = off

blend.gbuffers_weather.colortex3 = off
blend.gbuffers_weather.colortex4 = off
blend.gbuffers_weather.colortex5 = off
blend.gbuffers_weather.colortex6 = off
blend.gbuffers_weather.colortex7 = off

blend.gbuffers_textured.colortex3 = off
blend.gbuffers_textured.colortex4 = off
blend.gbuffers_textured.colortex5 = off
blend.gbuffers_textured.colortex6 = off
blend.gbuffers_textured.colortex7 = off

blend.gbuffers_terrain.colortex3 = off
blend.gbuffers_terrain.colortex4 = off
blend.gbuffers_terrain.colortex5 = off
blend.gbuffers_terrain.colortex6 = off
blend.gbuffers_terrain.colortex7 = off

blend.gbuffers_hand.colortex3 = off
blend.gbuffers_hand.colortex4 = off
blend.gbuffers_hand.colortex5 = off
blend.gbuffers_hand.colortex6 = off
blend.gbuffers_hand.colortex7 = off

blend.gbuffers_basic.colortex2 = off
blend.gbuffers_basic.colortex3 = off
blend.gbuffers_basic.colortex4 = off
blend.gbuffers_basic.colortex5 = off
blend.gbuffers_basic.colortex6 = off
blend.gbuffers_basic.colortex7 = off

size.buffer.colortex10 = 512 512
size.buffer.colortex11 = 0.5 1.0

clouds=off
sun=false
rain.depth=true

program.world0/composite2.enabled=DOF
program.world0/composite3.enabled=DOF
program.world0/composite4.enabled=TAA

# program.world0/composite8.enabled=false
# program.world0/composite11.enabled=false

# program.world0/composite7.enabled=false
# program.world0/composite10.enabled=false

# program.world0/composite6.enabled=false
# program.world0/composite12.enabled=false

# program.world0/composite5.enabled=false
# program.world0/composite13.enabled=false

#if Shadow_Transparent > 0
    shadowTranslucent = true
#else
    shadowTranslucent = false
#endif

#ifdef UseVoxelization
    image.voxelImage = voxelSampler red_integer r8ui unsigned_int true false 512 384 512
#endif

customTexture.perlinNoise = textures/perlin.dat TEXTURE_3D R8 128 128 64 RED UNSIGNED_BYTE
customTexture.worleyNoise = textures/worley.dat TEXTURE_3D R8 64 64 32 RED UNSIGNED_BYTE

#if Bloom_Levels < 6
    program.world0/composite15.enabled=false
    program.world0/composite16.enabled=false
#endif
#if Bloom_Levels < 5
    program.world0/composite14.enabled=false
    program.world0/composite17.enabled=false
#endif
#if Bloom_Levels < 4
    program.world0/composite13.enabled=false
    program.world0/composite18.enabled=false
#endif
#if Bloom_Levels < 3
    program.world0/composite12.enabled=false
    program.world0/composite19.enabled=false
#endif
#if Bloom_Levels < 2
    program.world0/composite11.enabled=false
    program.world0/composite20.enabled=false
#endif
#if Bloom_Levels < 1
    program.world0/composite10.enabled=false
#endif

#if viewBuffer != 11
    program.world0/composite21.enabled=false
#endif

# program.world0/composite16.enabled=false
# program.world0/composite17.enabled=false
# program.world0/composite18.enabled=false
# program.world0/composite19.enabled=false
# program.world0/composite20.enabled=false

blend.composite16 = ONE ONE ONE ZERO
blend.composite17 = ONE ONE ONE ZERO
blend.composite18 = ONE ONE ONE ZERO
blend.composite19 = ONE ONE ONE ZERO
blend.composite20 = ONE ONE ONE ZERO
blend.composite21 = ONE ONE ONE ZERO

bufferObject.0 = 8192
bufferObject.1 = 32
bufferObject.2 = 12

iris.features.required = CUSTOM_IMAGES COMPUTE_SHADERS SSBO SEPARATE_HARDWARE_SAMPLERS

screen = [SHADOWS] [PARALLAX] [WATER] [CLOUDS] [MISC] Texture_AO Texture_AO_Strength TAA DOF Reflections DirectionalLightmap Bloom_Levels
screen.SHADOWS = Shadow_Type Shadow_Transparent Shadow_HardwareSampler Shadow_NormalBias shadowMapResolution Shadow_PCF_Samples Shadow_PCSS_BlockSamples Shadow_PCF_BlurRadius Shadow_PCSS_BlurScale
screen.PARALLAX = Parallax Parallax_Shadows Parallax_DepthOffset Parallax_EdgeNormals Parallax_DiscardEdge
screen.WATER = Water_Height Water_VertexOffset Water_VertexHeightMult Water_VolumetricFog
screen.CLOUDS = VolumetricClouds VolumetricClouds_LowHeight VolumetricClouds_HighHeight VolumetricClouds_Samples
screen.MISC = viewBuffer viewBufferSweep lightMeeter UseVoxelization

sliders = viewBuffer viewBufferSweep Texture_AO_Strength shadowMapResolution Shadow_PCF_Samples Shadow_PCF_BlurRadius Shadow_PCSS_BlockSamples Shadow_PCSS_BlurScale Water_Height Water_VertexHeightMult VolumetricClouds_LowHeight VolumetricClouds_HighHeight VolumetricClouds_Samples


# Taken from Kappa 4.0, also seen in many other shaders
variable.float.sunDirNorm   = 1.0 / sqrt((sunPosition.x * sunPosition.x) + (sunPosition.y * sunPosition.y) + (sunPosition.z * sunPosition.z))
variable.float.svecX        = sunPosition.x * sunDirNorm
variable.float.svecY        = sunPosition.y * sunDirNorm
variable.float.svecZ        = sunPosition.z * sunDirNorm
uniform.vec3.sunDirView     = vec3(svecX, svecY, svecZ)
variable.float.sunDirX      = gbufferModelViewInverse.0.0 * sunPosition.x + gbufferModelViewInverse.1.0 * sunPosition.y + gbufferModelViewInverse.2.0 * sunPosition.z
variable.float.sunDirY      = gbufferModelViewInverse.0.1 * sunPosition.x + gbufferModelViewInverse.1.1 * sunPosition.y + gbufferModelViewInverse.2.1 * sunPosition.z
variable.float.sunDirZ      = gbufferModelViewInverse.0.2 * sunPosition.x + gbufferModelViewInverse.1.2 * sunPosition.y + gbufferModelViewInverse.2.2 * sunPosition.z
uniform.vec3.sunDir         = vec3(sunDirX * sunDirNorm, sunDirY * sunDirNorm, sunDirZ * sunDirNorm)

variable.float.moonDirNorm  = 1.0 / sqrt((moonPosition.x * moonPosition.x) + (moonPosition.y * moonPosition.y) + (moonPosition.z * moonPosition.z))
variable.float.mvecX        = moonPosition.x * moonDirNorm
variable.float.mvecY        = moonPosition.y * moonDirNorm
variable.float.mvecZ        = moonPosition.z * moonDirNorm
uniform.vec3.moonDirView    = vec3(mvecX, mvecY, mvecZ)
variable.float.moonDirX     = gbufferModelViewInverse.0.0 * moonPosition.x + gbufferModelViewInverse.1.0 * moonPosition.y + gbufferModelViewInverse.2.0 * moonPosition.z
variable.float.moonDirY     = gbufferModelViewInverse.0.1 * moonPosition.x + gbufferModelViewInverse.1.1 * moonPosition.y + gbufferModelViewInverse.2.1 * moonPosition.z
variable.float.moonDirZ     = gbufferModelViewInverse.0.2 * moonPosition.x + gbufferModelViewInverse.1.2 * moonPosition.y + gbufferModelViewInverse.2.2 * moonPosition.z
uniform.vec3.moonDir        = vec3(moonDirX * moonDirNorm, moonDirY * moonDirNorm, moonDirZ * moonDirNorm)

variable.float.shadowmapLightDirX = shadowModelViewInverse.2.0
variable.float.shadowmapLightDirY = shadowModelViewInverse.2.1
variable.float.shadowmapLightDirZ = shadowModelViewInverse.2.2
uniform.vec3.lightDir = vec3(shadowmapLightDirX, shadowmapLightDirY, shadowmapLightDirZ)